#/usr/bin/env bash


# Get a list of all files currently staged
filesadded=$(git diff --cached --name-only --diff-filter=d)

secret_in_code="false"
swap_files="false"


printf "\n\e[1mChecking staged files for secrets.\n\e[0m"

__output=""

for file in $filesadded
do
	  # Determine the file mime type. This will be used to issue the
	  # appropriate variant of the grep command later.
	  type=$(file "$file" --mime-type)

    inferred_type=$(file "$file")

	  # Use grep as the default flavour of grep.
	  search_command=grep

	  # Search for aws related strings.
	  arguments='-i -q -e aws -e aws_secret_key -e aws_accesss_key'

	  # For Gzipped, LZ compressed files, and tarballs, search using `xzgrep`.
	  if echo "$type" | grep -q -e "gz" -e "lz"; then
		    search_command=xzgrep
	  fi

	  # For zip files, use `zipgrep` as `xzgrep` can not process them.
	  if $(echo "$type" | grep -q -e "application/zip"); then
		    search_command=zipgrep
		    arguments='"(aws*)" -q'
	  fi


	  # Final command to be executed.
	  command_str="$search_command $arguments $file"

	  if eval $command_str; then
		    __output+="\n  \e[1m\e[31m$file\e[0m"
		    secret_in_code="true"
    elif $(echo "$inferred_type" | grep -q -e "private key"); then
        __output+="\n  \e[1m\e[34m$file\e[0m"
		    secret_in_code="true"
	  elif $(echo "$file" | grep -q -e "~" -e "#"); then
		    __output+="\n  \e[33m$file\e[0m"
		    swap_files="true"
	  else
		    __output+="\n  \e[90m$file\e[0m"
	  fi
done

echo -e $__output

if [ "$swap_files" == "true" ]; then
	  echo -e "\n\n\e[33mWarning: Swap files staged for commit.\e[0m"
fi

if [ "$secret_in_code" == "true" ]; then
    echo -e "\n\n\e[1m\e[31mDanger: Check files.\n\e[0m"
	  exit -1
else
    echo -e "\n\n\e[1m\e[33mAll files look Ok.\n\e[0m"
fi
